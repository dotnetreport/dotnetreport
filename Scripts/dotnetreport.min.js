/// dotnet Report Builder view model v4.3.4
/// License has to be purchased for use
/// 2022 (c) www.dotnetreport.com
function pagerViewModel(e) { e = e || {}; var r = this; r.pageSize = ko.observable(e.pageSize || 30), r.pages = ko.observable(e.pages || 1), r.currentPage = ko.observable(e.currentPage || 1), r.pauseNavigation = ko.observable(!1), r.totalRecords = ko.observable(0), r.sortColumn = ko.observable(), r.sortDescending = ko.observable(), r.isFirstPage = ko.computed(function () { return 1 == this.currentPage() }, r), r.isLastPage = ko.computed(function () { return this.currentPage() == this.pages() }, r), r.currentPage.subscribe(function (e) { e > r.pages() && r.currentPage(0 == r.pages() ? 1 : r.pages()), e < 1 && r.currentPage(1) }), r.previous = function () { r.pauseNavigation() || r.isFirstPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) - 1) }, r.next = function () { r.pauseNavigation() || r.isLastPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) + 1) }, r.first = function () { r.pauseNavigation() || r.currentPage(1) }, r.last = function () { r.pauseNavigation() || r.currentPage(r.pages()) }, r.changeSort = function (e) { r.sortColumn() == e ? r.sortDescending(!r.sortDescending()) : r.sortDescending(!1), r.sortColumn(e), 1 != r.currentPage() && r.currentPage(1) } } function formulaFieldViewModel(e) { e = e || {}; var r = this; r.fieldId = ko.observable(e.fieldId), r.isParenthesesStart = ko.observable(e.isParenthesesStart), r.isParenthesesEnd = ko.observable(e.isParenthesesEnd), r.formulaOperation = ko.observable(e.formulaOperation), r.isConstantValue = ko.observable(!!e.constantValue), r.constantValue = ko.observable(e.constantValue) } function linkFieldViewModel(r, o) { r = r || {}; var a = this, t = !0; a.linkTypes = ["Report", "URL"], a.selectedLinkType = ko.observable(r.LinksToReport ? "Report" : "URL"), a.allFields = ko.observableArray([]), a.LinksToReport = ko.observable(r.LinksToReport || !1), a.LinkedToReportId = ko.observable(), a.SendAsFilterParameter = ko.observable(r.SendAsFilterParameter || !1), a.SelectedFilterId = ko.observable(r.SelectedFilterId), a.LinkToUrl = ko.observable(r.LinkToUrl), a.SendAsQueryParameter = ko.observable(r.SendAsQueryParameter || !1), a.QueryParameterName = ko.observable(r.QueryParameterName), a.toJs = function () { return { LinksToReport: a.LinksToReport(), LinkedToReportId: a.LinkedToReportId(), SendAsFilterParameter: a.SendAsFilterParameter(), SelectedFilterId: a.SelectedFilterId(), LinkToUrl: a.LinkToUrl(), SendAsQueryParameter: a.SendAsQueryParameter(), QueryParameterName: a.QueryParameterName() } }, a.selectedLinkType.subscribe(function () { a.LinksToReport("Report" == a.selectedLinkType()) }), a.LinkedToReportId.subscribe(function (e) { if (e) return ajaxcall({ url: o.apiUrl, data: { method: "/ReportApi/LoadReport", model: JSON.stringify({ reportId: e }) } }).done(function (e) { (e = (e = e.d ? e.d : e).result ? e.result : e).UseStoredProc ? a.allFields(_.map(e.SelectedParameters, function (e) { return { fieldId: e.ParameterId, fieldName: e.ParameterName } })) : a.allFields(e.SelectedFields), t && a.LinksToReport() && (a.SelectedFilterId(r.SelectedFilterId), t = !1) }) }), a.LinksToReport() && a.LinkedToReportId(r.LinkedToReportId), a.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, a.validateLink = function () { if (null != o.linkModal) { var e = o.linkModal.find("input,select"), r = !0; $(".needs-validation").removeClass("was-validated"); for (var t = 0; t < e.length; t++)$(e[t]).removeClass("is-invalid"), a.isInputValid(e[t]) || (r = !1, $(".needs-validation").addClass("was-validated"), $(e[t]).addClass("is-invalid")); return r } }, a.clear = function () { a.LinksToReport(!0), a.selectedLinkType("Report"), a.LinkedToReportId(null), a.SendAsFilterParameter(!1), a.SelectedFilterId(null), a.LinkToUrl = ko.observable(null), a.SendAsQueryParameter(!1), a.QueryParameterName(null) } } function scheduleBuilder(e) { var r = this, t = (r.options = ["day", "week", "month", "year", "once"], r.showAtTime = ko.observable(!0), r.showDays = ko.observable(!1), r.showMonths = ko.observable(!1), r.showDates = ko.observable(!1), r.selectedOption = ko.observable("day"), r.selectedDays = ko.observableArray([]), r.selectedMonths = ko.observableArray([]), r.selectedDates = ko.observableArray([]), r.selectedHour = ko.observable("12"), r.selectedMinute = ko.observable("00"), r.selectedAmPm = ko.observable("PM"), r.selectedDate = ko.observable(), "Last day of the month"); r.days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], r.months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], r.dates = [], r.hours = [], r.minutes = ["00", "15", "30", "45"]; for (var o = 1; o <= 31; o++)r.dates.push(o); for (o = 1; o <= 12; o++)r.hours.push(o); r.dates.push(t), r.hasSchedule = ko.observable(!1), r.emailTo = ko.observable(""), r.hasScheduleStart = ko.observable(!1), r.hasScheduleEnd = ko.observable(!1), r.scheduleStart = ko.observable(), r.scheduleEnd = ko.observable(), r.format = ko.observable(""), r.selectedOption.subscribe(function (e) { switch (r.selectedDays([]), r.selectedMonths([]), r.selectedDates([]), e) { case "once": case "day": r.showDays(!1), r.showDates(!1), r.showMonths(!1); break; case "week": r.showDays(!0), r.showDates(!1), r.showMonths(!1); break; case "month": r.showDays(!1), r.showDates(!0), r.showMonths(!1); break; case "year": r.showDays(!1), r.showDates(!0), r.showMonths(!0) } }), r.toJs = function () { return r.hasSchedule() ? { SelectedOption: r.selectedOption(), SelectedDays: r.selectedDays().join(","), SelectedMonths: r.selectedMonths().join(","), SelectedDates: "once" == r.selectedOption() ? r.selectedDate() : r.selectedDates().join(","), SelectedHour: r.selectedHour(), SelectedMinute: r.selectedMinute(), SelectedAmPm: r.selectedAmPm(), EmailTo: r.emailTo(), UserId: e, ScheduleStart: r.hasScheduleStart() ? r.scheduleStart() : "", ScheduleEnd: r.hasScheduleEnd() ? r.scheduleEnd() : "", Format: r.format() } : null }, r.fromJs = function (e) { r.hasSchedule(!!e), r.selectedOption((e = e || { SelectedOption: "day", SelectedDays: "", SelectedMonths: "", SelectedDates: "" }).SelectedOption), r.selectedDays(e.SelectedDays.split(",")), r.selectedMonths(e.SelectedMonths.split(",")), "once" == r.selectedOption() ? r.selectedDate(e.SelectedDates) : e.SelectedDates == t ? r.selectedDates([e.SelectedDates]) : r.selectedDates(_.map(e.SelectedDates.split(","), function (e) { return parseInt(e) })), r.selectedHour(e.SelectedHour || "12"), r.selectedMinute(e.SelectedMinute || "00"), r.selectedAmPm(e.SelectedAmPm || "PM"), r.emailTo(e.EmailTo || ""), r.scheduleStart(e.ScheduleStart ? new Date(+e.ScheduleStart.match(/\d+/)[0]) : ""), r.scheduleEnd(e.ScheduleEnd ? new Date(+e.ScheduleEnd.match(/\d+/)[0]) : ""), r.hasScheduleStart(!!e.ScheduleStart), r.hasScheduleEnd(!!e.ScheduleEnd), r.format(e.Format) }, r.clear = function () { r.fromJs(null) } } function filterGroupViewModel(c) { c = c || {}; var p = this; p.isRoot = !0 === c.isRoot, p.AndOr = ko.observable(c.AndOr || " AND "), p.Filters = ko.observableArray([]), p.FilterGroups = ko.observableArray([]), p.AddFilterGroup = function (e) { e = new filterGroupViewModel({ parent: c.parent, AndOr: e.AndOr, options: c.options }); return p.FilterGroups.push(e), e }, p.RemoveFilterGroup = function (e) { p.FilterGroups.remove(e) }, p.GetValuesInFilterGroupForFieldAndTable = function (r, t) { var o = null; return _.forEach(p.Filters(), function (e) { if (e.Field() && e.Field().hasForeignKey && e.Field().foreignTable == r && e.Field().foreignKey == t) return o = e, !1 }), o }, p.AddFilter = function (e, r) { e = e || {}; var t = ko.observableArray([]), o = ko.observableArray([]), a = new URL(window.location.href), l = a.searchParams.get("filterId"), a = a.searchParams.get("filterValue"), n = (l && a && e.FieldId == parseInt(l) && (e.Value1 = a, e.Operator = "="), e.Value1 && t.push({ id: e.Value1, text: e.Value1 }), e.Value2 && t.push({ id: e.Value2, text: e.Value2 }), ko.observable()), i = "in" == e.Operator || "not in" == e.Operator ? (e.Value1 || "").split(",") : [], s = { AndOr: ko.observable(r ? " AND " : e.AndOr), Field: n, Operator: ko.observable(e.Operator), Value: ko.observable(e.Value1), Value2: ko.observable(e.Value2), ValueIn: ko.observableArray(i), LookupList: t, ParentList: o, ParentIn: ko.observableArray([]), Apply: ko.observable(null == e.Apply || e.Apply), IsFilterOnFly: !0 === r, showParentFilter: ko.observable(!0) }; function d(e, r) { ajaxcall({ url: c.options.apiUrl, data: { method: "/ReportApi/GetLookupList", model: JSON.stringify({ fieldId: e, dataFilters: r }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), ajaxcall({ type: "POST", url: c.options.lookupListUrl, data: JSON.stringify({ lookupSql: e.sql, connectKey: e.connectKey }) }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), t(e), 0 < i.length && (s.ValueIn(i), i = []) }) }) } s.Operator.subscribe(function () { s.Value(null), s.Value2(null) }); var u = !0; return n.subscribe(function (t) { var e; u || s.Value(null), t && t.hasForeignKey && (t.hasForeignParentKey ? (s.ParentIn.subscribe(function (e) { var r; e && 0 < e.length ? ((r = Object.assign({}, c.options.dataFilters || {}))[t.foreignParentApplyTo] = e.join(), d(t.fieldId, r)) : d(t.fieldId, c.options.dataFilters) }), (e = p.GetValuesInFilterGroupForFieldAndTable(t.foreignParentTable, t.foreignParentKeyField)) ? (s.showParentFilter(!1), e.Value.subscribe(function (e) { s.ParentIn(e ? [e] : null) }), e.ValueIn.subscribe(function (e) { s.ParentIn(e) }), s.ParentIn("=" == e.Operator() ? e.Value() ? [e.Value()] : [] : e.ValueIn())) : (ajaxcall({ url: c.options.apiUrl, data: { method: "/ReportApi/GetLookupList", model: JSON.stringify({ fieldId: t.fieldId, dataFilters: c.options.dataFilters, parentLookup: !0 }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), ajaxcall({ type: "POST", url: c.options.lookupListUrl, data: JSON.stringify({ lookupSql: e.sql, connectKey: e.connectKey }) }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), o(e) }) }), d(t.fieldId, c.options.dataFilters))) : d(t.fieldId, c.options.dataFilters)), t && t.restrictedDateRange && "DateTime" == t.fieldType && (s.Value.subscribe(function (e) { var r; e && "range" == s.Operator() && !p.isRangeValid(e, t.restrictedDateRange) && (toastr.error("Filter range is more than " + t.restrictedDateRange + ". Please choose a shorter date range"), s.Value(null)), e && "between" == s.Operator() && (r = s.Value2(), p.isDate(e) && p.isDate(r) && !p.isBetweenValid(e, s.Value2(), t.restrictedDateRange) && (toastr.error("Filter range is more than " + t.restrictedDateRange + ". Please choose a shorter date range"), s.Value(null))) }), s.Value2.subscribe(function (e) { var r = s.Value(); p.isDate(r) && p.isDate(e) && "between" == s.Operator() && (p.isBetweenValid(r, e, t.restrictedDateRange) || (toastr.error("Filter range is more than " + t.restrictedDateRange + ". Please choose a shorter date range"), s.Value2(null))) })) }), e.FieldId && n(c.parent.FindField(e.FieldId)), s.compareTo = ko.computed(function () { return n() ? _.filter(c.parent.AdditionalSeries(), function (e) { return e.Field().fieldId == n().fieldId }) : [] }), p.Filters.push(s), u = !1, s }, p.RemoveFilter = function (e) { p.Filters.remove(e) }, p.isRangeValid = function (e, r) { var t, o; return !(!e || !r) && (r = r.split(" "), t = parseInt(r[0]), r = r[1], o = !0, ("This Month To Date" == e || 0 <= e.indexOf("Month")) && ("Years" == r && (o = !1), "Days" == r && t < 30 && (o = !1)), "This Year To Date" == e ? ("Months" == r && t < 12 && (o = !1), "Days" == r && t < 365 && (o = !1)) : 0 <= e.indexOf("Year") ? ("Months" == r && t < 12 && (o = !1), "Days" == r && 365 < t && (o = !1)) : 0 <= e.indexOf("Week") ? "Days" == r && t < 7 && (o = !1) : "Last 30 Days" == e && "Days" == r && t < 30 && (o = !1), o) }, p.isBetweenValid = function (e, r, t) { var t = t.split(" "), o = parseInt(t[0]), t = t[1], a = (new Date(r) - new Date(e)) / 864e5, l = !0; switch (t) { case "Days": l = a < o && 0 < a; break; case "Months": l = a < 30 * o; break; case "Years": l = a < 365 * o }return l }, p.isDate = function (e) { return !!e && ("Invalid Date" !== new Date(e) && !isNaN(new Date(e))) } } var manageAccess = function (e) { return { clientId: ko.observable(), users: _.map(e.users || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id || e), text: e.text || e } }), userRoles: _.map(e.userRoles || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id || e), text: e.text || e } }), viewOnlyUsers: _.map(e.users || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id || e), text: e.text || e } }), viewOnlyUserRoles: _.map(e.userRoles || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id || e), text: e.text || e } }), deleteOnlyUsers: _.map(e.users || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id || e), text: e.text || e } }), deleteOnlyUserRoles: _.map(e.userRoles || [], function (e) { return { selected: ko.observable(!1), value: ko.observable(e.id || e), text: e.text || e } }), getAsList: function (e) { var r = ""; return _.forEach(e, function (e) { e.selected() && (r += (r ? "," : "") + e.value()) }), r }, setupList: function (e, r) { _.forEach(e, function (e) { 0 <= r.indexOf(e.value()) ? e.selected(!0) : e.selected(!1) }) }, isDashboard: ko.observable(1 == e.isDashboard) } }, headerDesigner = function (o) { var a = this; function t(e) { var r = a.canvas.getActiveObject(); return r && r[e] || "" } function l(e, r) { var t = a.canvas.getActiveObject(); t && (t.set(e, r).setCoords(), a.canvas.renderAll()) } a.canvas = null, a.initiated = !1, a.selectedObject = ko.observable(), a.UseReportHeader = ko.observable(!0 === o.useReportHeader), a.init = function (e) { a.initiated || (a.initiated = !0, a.canvas = new fabric.Canvas(o.canvasId), !0 !== e && (e = a.canvas, a.objectProperties = { fontFamily: ko.observable(), fontSize: ko.observable(), fontColor: ko.observable(), fontBackcolor: ko.observable(), textAlign: ko.observable(), fontBold: ko.observable(), fontItalic: ko.observable(), fontUnderline: ko.observable() }, e.on("object:moving", function (e) { e = e.target; e.currentHeight > e.canvas.height || e.currentWidth > e.canvas.width || (e.setCoords(), (e.getBoundingRect().top < 0 || e.getBoundingRect().left < 0) && (e.top = Math.max(e.top, e.top - e.getBoundingRect().top), e.left = Math.max(e.left, e.left - e.getBoundingRect().left)), (e.getBoundingRect().top + e.getBoundingRect().height > e.canvas.height || e.getBoundingRect().left + e.getBoundingRect().width > e.canvas.width) && (e.top = Math.min(e.top, e.canvas.height - e.getBoundingRect().height + e.top - e.getBoundingRect().top), e.left = Math.min(e.left, e.canvas.width - e.getBoundingRect().width + e.left - e.getBoundingRect().left))) }), e.on("selection:created", function (e) { a.selectedObject(e), a.objectProperties.fontFamily(a.getFontFamily()), a.objectProperties.fontBold(a.getFontBold()), a.objectProperties.fontItalic(a.getFontItalic()), a.objectProperties.fontColor(a.getFontColor()), a.objectProperties.fontUnderline(a.getFontUnderline()), a.objectProperties.textAlign(a.getTextAlign()) }), e.on("selection:cleared", function (e) { a.selectedObject(null) }))) }, a.resizeCanvas = function (e) { var r = a.canvas; null != r && (100 < (e = isNaN(e) ? $("#" + o.canvasId).parent().parent().width() : e) && r.setWidth(e), r.renderAll()) }, a.dispose = function () { a.canvas && (a.canvas.dispose(), a.initiated = !1) }, a.saveCanvas = function () { var e = JSON.stringify(a.canvas.toJSON()); return ajaxcall({ url: o.apiUrl.replace("CallReportApi", "PostReportApi"), type: "POST", data: JSON.stringify({ method: "/ReportApi/SaveReportHeader", headerJson: e, useReportHeader: a.UseReportHeader() }) }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), toastr.success("Report Header changes saved") }) }, a.loadCanvas = function (t) { var r = a.canvas; return ajaxcall({ url: o.apiUrl, data: { method: "/ReportApi/GetReportHeader", model: JSON.stringify({}) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), a.UseReportHeader(e.useReportHeader), r.loadFromJSON(e.headerJson, r.renderAll.bind(r), function (e, r) { !0 === t && r.set("selectable", !1) }) }) }, a.addText = function () { a.canvas.add(new fabric.Textbox("Enter Text", { left: 50, top: 50, fontFamily: "arial", fontWeight: "", originX: "left", hasRotatingPoint: !0, centerTransform: !0, width: 300 })) }, a.addLine = function () { a.canvas.add(new fabric.Line([50, 100, 300, 100], { left: 20, top: 20, stroke: "#000000" })) }, a.uploadImage = function (e) { if (1024e3 < e.size) return toastr.error("Max file size is 1MB. Please choose a smaller image file. "), !1; var r = new FileReader; r.onload = function (e) { var r = new Image; r.src = e.target.result, r.onload = function () { var e = new fabric.Image(r); e.set({ angle: 0 }), a.canvas.centerObject(e), a.canvas.add(e), a.canvas.renderAll() } }, r.readAsDataURL(e) }, a.remove = function () { var e = a.canvas; e.remove(e.getActiveObject()) }, a.getText = function () { return t("text") }, a.setText = function (e) { l("text", e) }, a.getFontFamily = function () { return t("fontFamily").toLowerCase() }, a.setFontFamily = function (e, r) { l("fontFamily", r.currentTarget.value) }, a.getFontBold = function () { return t("fontWeight").toLowerCase() }, a.setFontBold = function (e, r) { l("fontWeight", "bold" == t("fontWeight") ? "" : "bold") }, a.getFontItalic = function () { return t("fontStyle").toLowerCase() }, a.setFontItalic = function (e, r) { l("fontStyle", "italic" == t("fontStyle") ? "" : "italic") }, a.getFontColor = function () { return t("stroke") }, a.setFontColor = function (e, r) { l("stroke", r.currentTarget.value), l("fill", r.currentTarget.value) }, a.getFontUnderline = function () { return t("underline").toLowerCase() }, a.setFontUnderline = function (e, r) { l("underline", t("underline") ? "" : "underline") }, a.getTextAlign = function () { return t("textAlign") }, a.setTextAlign = function (e, r) { l("textAlign", r.currentTarget.value.toLowerCase()) } }, reportViewModel = function (d) { var u = this; (d = d || {}).userSettings = d.userSettings || {}, d.userId = d.userSettings.currentUserId || "", d.users = d.userSettings.users, d.userRoles = d.userSettings.userRoles, u.currentUserId = d.userSettings.userId, u.currentUserRole = (d.userSettings.currentUserRoles || []).join(), u.currentUserName = d.userSettings.currentUserName, u.allowAdmin = ko.observable(d.userSettings.allowAdminMode), u.userIdForSchedule = d.userSettings.userIdForSchedule || u.currentUserId, u.ChartData = ko.observable(), u.ReportName = ko.observable(), u.ReportType = ko.observable("List"), u.ReportDescription = ko.observable(), u.FolderID = ko.observable(), u.ReportID = ko.observable(), u.Tables = ko.observableArray([]), u.Procs = ko.observableArray([]), u.SelectedTable = ko.observable(), u.SelectedProc = ko.observable(), u.ChooseFields = ko.observableArray([]), u.ChosenFields = ko.observableArray([]), u.selectedTableFields = [], u.SelectedFields = ko.observableArray([]), u.SelectFields = ko.observableArray([]), u.SelectedField = ko.observable(), u.AdditionalSeries = ko.observableArray([]), u.ReportSeries = "", u.IncludeSubTotal = ko.observable(!1), u.ShowUniqueRecords = ko.observable(!1), u.AggregateReport = ko.observable(!1), u.SortByField = ko.observable(), u.SortDesc = ko.observable(!1), u.EditFiltersOnReport = ko.observable(!1), u.UseReportHeader = ko.observable(!1), u.HideReportHeader = ko.observable(!1), u.FilterGroups = ko.observableArray(), u.FilterGroups.subscribe(function (e) { e && 0 == e.length && u.FilterGroups.push(new filterGroupViewModel({ isRoot: !0, parent: u, options: d })) }), u.addSortField = function (e, r) { var t = { sortByFieldId: ko.observable(e), sortDesc: ko.observable(!0 === r), remove: function () { u.SortFields.remove(t) } }; u.SortFields.push(t) }, u.SortFields = ko.observableArray([]), u.FilterGroups([]), u.SaveReport = ko.observable(!0), u.ShowDataWithGraph = ko.observable(!0), u.ShowOnDashboard = ko.observable(!1), u.ReportMode = ko.observable(d.reportMode || "start"), u.Folders = ko.observableArray(), u.SavedReports = ko.observableArray([]), u.SelectedFolder = ko.observable(null), u.CanSaveReports = ko.observable(!0), u.CanManageFolders = ko.observable(!0), u.CanEdit = ko.observable(!0), u.useReportHeader = ko.observable(!1), u.SavedReports.subscribe(function (e) { u.ReportID() && (e = _.find(e, { reportId: u.ReportID() }) || { canEdit: !1 }, u.CanEdit(e.canEdit || u.adminMode())) }), u.fieldFormatTypes = ["Auto", "Number", "Decimal", "Currency", "Percentage", "Date", "Date and Time", "Time", "String"], u.decimalFormatTypes = ["Number", "Decimal", "Currency", "Percentage"], u.dateFormatTypes = ["Date", "Date and Time", "Time"], u.fieldAlignments = ["Auto", "Left", "Right", "Center"], u.designingHeader = ko.observable(!1), u.headerDesigner = new headerDesigner({ canvasId: d.reportHeader, apiUrl: d.apiUrl }), u.initHeaderDesigner = function () { u.headerDesigner.init(), u.headerDesigner.loadCanvas(!1), u.designingHeader(!0) }, u.ReportResult = ko.observable({ HasError: ko.observable(!1), ReportDebug: ko.observable(!1), Exception: ko.observable(), Warnings: ko.observable(), ReportSql: ko.observable(), ReportData: ko.observable(null), SubTotals: ko.observableArray([]) }), u.useStoredProc = ko.observable(!1), u.StoredProcId = ko.observable(), u.Parameters = ko.observableArray([]), u.showParameters = ko.observable(!0), u.pager = new pagerViewModel, u.currentSql = ko.observable(), u.currentConnectKey = ko.observable(), u.adminMode = ko.observable(!1), u.allExpanded = ko.observable(!1), u.pager.currentPage(1), u.x = ko.observable(0), u.y = ko.observable(0), u.width = ko.observable(3), u.height = ko.observable(2), u.columnDetails = ko.observableArray([]), u.useStoredProc.subscribe(function () { u.SelectedTable(null), u.SelectedProc(null), u.SelectedFields([]), u.clearReport() }), u.adminMode.subscribe(function (e) { u.LoadAllSavedReports(), e ? (u._cansavereports = u.CanSaveReports(), u.SaveReport(!0), u.CanSaveReports(!0)) : u.CanSaveReports(u._cansavereports), localStorage && localStorage.setItem("reportAdminMode", e) }), u.manageAccess = manageAccess(d), u.pager.currentPage.subscribe(function () { u.ExecuteReportQuery(u.currentSql(), u.currentConnectKey(), u.ReportSeries) }), u.pager.pageSize.subscribe(function () { u.ExecuteReportQuery(u.currentSql(), u.currentConnectKey(), u.ReportSeries) }), u.createNewReport = function () { u.clearReport(), u.ReportMode("generate") }, u.ReportType.subscribe(function (e) { "List" == e ? u.AggregateReport(!1) : u.AggregateReport(!0) }), u.setReportType = function (e) { u.ReportType(e) }, u.cancelCreateReport = function () { bootbox.confirm("Are you sure you would like to cancel editing this Report?", function (e) { e && (u.clearReport(), d.reportWizard.modal("hide"), u.ReportMode("start")) }) }, u.FlyFilters = ko.computed(function () { var r = []; return _.forEach(u.FilterGroups(), function (e) { _.forEach(e.Filters(), function (e) { e.IsFilterOnFly && r.push(e) }) }), r }), u.enabledFields = ko.computed(function () { return _.filter(u.SelectedFields(), function (e) { return !e.disabled() }) }), u.scheduleBuilder = new scheduleBuilder(u.userIdForSchedule), u.ManageFolder = { FolderName: ko.observable(), IsNew: ko.observable(!1), newFolder: function () { u.ManageFolder.IsNew(!0), u.ManageFolder.FolderName(""), $("#folderModal").modal("show") }, editFolder: function () { null == u.SelectedFolder() ? toastr.error("Please choose a folder first") : 0 == u.SelectedFolder().Id ? toastr.error("Cannot edit Default folder") : (u.ManageFolder.IsNew(!1), u.ManageFolder.FolderName(u.SelectedFolder().FolderName), $("#folderModal").modal("show")) }, saveFolder: function () { var r; if ("" != u.ManageFolder.FolderName()) return r = u.ManageFolder.IsNew() ? 0 : u.SelectedFolder().Id, 0 != _.filter(u.Folders(), function (e) { return e.FolderName.toLowerCase() == u.ManageFolder.FolderName().toLowerCase() && (0 == r || 0 != r && e.Id != r) }).length ? (toastr.error("Folder name is already in use, please choose a different Folder Name"), !1) : void ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/SaveFolder", model: JSON.stringify({ folderId: r, folderName: u.ManageFolder.FolderName() }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), u.ManageFolder.IsNew() ? u.Folders.push({ Id: e, FolderName: u.ManageFolder.FolderName() }) : (e = u.SelectedFolder(), u.Folders.remove(u.SelectedFolder()), e.FolderName = u.ManageFolder.FolderName(), u.Folders.push(e)), $("#folderModal").modal("hide") }); toastr.error("Please enter a Folder Name") }, deleteFolder: function () { null == u.SelectedFolder() ? toastr.error("Please choose a folder first") : 0 == u.SelectedFolder().Id ? toastr.error("Cannot delete Default folder") : bootbox.confirm("Are you sure you want to delete this Folder?\n\nWARNING: Deleting a folder will delete all reports in the folder and this action cannot be undone.", function (e) { e && ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/DeleteFolder", model: JSON.stringify({ folderId: u.SelectedFolder().Id }) } }).done(function () { u.Folders.remove(u.SelectedFolder()), u.SelectedFolder(null) }) }) } }, u.reportsInFolder = ko.computed(function () { return null == u.SelectedFolder() ? [] : _.filter(u.SavedReports(), function (e) { return e.folderId == u.SelectedFolder().Id }) }), u.clearReport = function () { u.ReportName(""), u.ReportDescription(""), u.ReportType("List"), u.FolderID(null == u.SelectedFolder() ? 0 : u.SelectedFolder().Id), u.ChosenFields([]), u.SelectedFields([]), u.SelectFields([]), u.SelectedField(null), u.SelectedProc(null), u.SelectedTable(null), u.IncludeSubTotal(!1), u.EditFiltersOnReport(!1), u.ShowUniqueRecords(!1), u.AggregateReport(!1), u.SortByField(null), u.SortDesc(!1), u.FilterGroups([]), u.ReportID(0), u.SaveReport(u.CanSaveReports()), u.scheduleBuilder.clear(), u.SortFields([]), u.isFormulaField(!1) }, u.SelectedProc.subscribe(function (t) { var o, e; null != t && (u.ChooseFields([]), u.SelectedFields([]), u.selectedTableFields = [], e = _.filter(t.Columns, function (e) { return 0 == e.DoNotDisplay }), e = _.map(e, function (e) { var r = ko.toJS(t.SelectedFields && t.SelectedFields.length ? _.find(t.SelectedFields, { fieldName: e.DisplayName }) : null) || u.getEmptyFormulaField(); return r.fieldName = e.DisplayName, r.tableName = t.DisplayName, r.procColumnId = e.Id, r.procColumnName = e.ColumnName, u.setupField(r) }), t.SelectedFields = null, u.SelectedFields(e), o = !0, e = _.map(t.Parameters, function (r) { var e = ko.toJS(t.SelectedParameters && t.SelectedParameters.length ? _.find(t.SelectedParameters, { ParameterName: r.ParameterName }) : null); return r.operators = ["="], r.ParameterValue && r.operators.push("is default"), r.Required || r.operators.push("is blank"), r.Required || r.operators.push("is null"), r.Operator ? (r.Operator(e ? e.Operator : "="), r.Value(e ? e.Value : r.ParameterValue)) : (r.Operator = ko.observable(e ? e.Operator : "="), r.Value = ko.observable(e ? e.Value : r.ParameterValue), r.Operator.subscribe(function (e) { "is default" == e && r.Value(r.ParameterValue) })), r.Field = { hasForeignKey: r.ForeignKey, fieldType: r.ParameterDataTypeString, hasForeignParentKey: !1 }, r.LookupList = ko.observableArray([]), r.Value() && r.LookupList.push({ id: r.Value(), text: r.Value() }), r.ForeignKey && ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/GetPrmLookupList", model: JSON.stringify({ parameterId: r.Id, procId: t.Id, dataFilters: d.dataFilters }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), ajaxcall({ type: "POST", url: d.lookupListUrl, data: JSON.stringify({ lookupSql: e.sql, connectKey: e.connectKey }) }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), r.LookupList(e) }) }), r.Hidden || (o = !1), r }), t.SelectedParameters = null, u.Parameters(e), u.showParameters(!o)) }), u.FindInFilterGroup = function (r) { var t = !1; return _.forEach(u.FilterGroups(), function (e) { _.forEach(e.Filters(), function (e) { if (e.Field() && (e.Field().FieldId == r || e.Field().fieldId == r)) return !(t = !0) }) }), t }, u.SelectedFields.subscribe(function (e) { var r, t = 0 < e.length ? e[e.length - 1] : null; if (t && (t.forceFilter || t.forceFilterForTable) && !u.FindInFilterGroup(t.fieldId) && (r = u.FilterGroups()[0].AddFilter(), setTimeout(function () { t.forced = !0, r.Field(t) }, 500)), t) { var o = _.filter(u.selectedTableFields, function (e) { return 1 == e.forceFilterForTable }), a = _.filter(u.selectedTableFields, function (e) { return 0 == e.forceFilterForTable }).map(function (e) { return e.fieldId }), e = _.find(e, function (e) { return 0 <= a.indexOf(e.fieldId) }); if (null != e && 0 != o.length) for (var l = 0; l < o.length; l++){ var n = o[l]; _.find(u.SelectedFields(), function (e) { return e.fieldId == n.fieldId }) || (n.disabled(!0), u.SelectedFields.push(n)) } } }), u.loadTableFields = function (o) { return ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/GetFields", model: JSON.stringify({ tableId: o.tableId, includeDoNotDisplay: !1 }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result); e = _.map(e, function (r, e) { var t = _.filter(u.SelectedFields(), function (e) { return e.fieldId == r.fieldId }); return 0 < t.length ? t[0] : (r.tableName = o.tableName, u.setupField(r)) }); u.ChooseFields(e), u.selectedTableFields = e }) }, u.SelectedTable.subscribe(function (e) { if (u.SelectedProc(null), null != e) return u.loadTableFields(e); u.ChooseFields([]), u.selectedTableFields = [] }), u.MoveChosenFields = function () { _.forEach(u.ChosenFields(), function (r) { 0 < _.filter(u.SelectedFields(), function (e) { return e.fieldId == r.fieldId }).length ? toastr.error(r.fieldName + " is already Selected") : u.SelectedFields.push(r) }) }, u.MoveAllFields = function () { _.forEach(u.ChooseFields(), function (r) { 0 === _.filter(u.SelectedFields(), function (e) { return e.fieldId == r.fieldId }).length && u.SelectedFields.push(r) }) }, u.RemoveSelectedFields = function () { _.forEach(u.ChooseFields(), function (e) { u.SelectedFields.remove(e) }) }, u.isFormulaField = ko.observable(!1), u.formulaFields = ko.observableArray([]), u.formulaFieldLabel = ko.observable(""), u.formulaDataFormat = ko.observable(""), u.formulaDecimalPlaces = ko.observable(), u.formulaOnlyHasDateFields = ko.computed(function () { var r, e = u.formulaFields(); return !(e.length <= 0) && (r = !0, _.forEach(e, function (e) { if (!e.setupFormula.isParenthesesStart() && !e.setupFormula.isParenthesesEnd() && !e.setupFormula.isConstantValue() && e.fieldType && e.fieldType.indexOf("Date") < 0) return r = !1 }), r) }), u.formulaFields.subscribe(function (e) { e && ((e = u.formulaOnlyHasDateFields()) && ["Days", "Hours", "Minutes", "Seconds"].indexOf(u.formulaDataFormat()) < 0 && u.formulaDataFormat("Days"), !e && ["String", "Integer", "Double"].indexOf(u.formulaDataFormat()) < 0 && u.formulaDataFormat("String")) }), u.formulaHasConstantValue = ko.computed(function () { var r, e = u.formulaFields(); return !(e.length <= 0) && (r = !1, _.forEach(e, function (e) { if (!e.setupFormula.isParenthesesStart() && !e.setupFormula.isParenthesesEnd() && e.setupFormula.isConstantValue()) return !(r = !0) }), r) }), u.getEmptyFormulaField = function () { return { tableName: "Custom", fieldName: u.formulaFieldLabel() || "Custom", fieldFormat: u.formulaDataFormat() || "String", decimalPlaces: u.formulaDecimalPlaces(), fieldType: "Custom", aggregateFunction: "", filterOnFly: !1, disabled: !1, groupInGraph: !1, dontSubTotal: !1, hideInDetail: !1, linkField: !1, linkFieldItem: null, fieldAggregate: ["Group", "Count"], fieldAggregateWithDrilldown: ["Group", "Count"], isFormulaField: !0, hasForeignKey: !1, fieldFilter: ["=", "<>", ">=", ">", "<", "<="], formulaItems: u.formulaFields(), forceFilterForTable: !1 } }, u.selectedFieldsCanFilter = ko.computed(function () { return _.filter(u.SelectedFields(), function (e) { return !e.isFormulaField() }) }), u.clearFormulaField = function () { u.formulaFields([]), u.formulaFieldLabel(""), u.formulaDataFormat("String"), u.formulaDecimalPlaces(null) }, u.isFormulaField.subscribe(function () { u.clearFormulaField() }), u.saveFormulaField = function () { var e; 0 == u.formulaFields().length ? toastr.error("Please select some items for the Custom Field") : u.validateReport(!0) ? (e = u.getEmptyFormulaField(), u.SelectedFields.push(u.setupField(e)), u.clearFormulaField(), u.isFormulaField(!1)) : toastr.error("Please correct validation issues") }, u.showFormulaOperation = function (e) { var r = u.formulaFields().length; return !(r <= 1 || e == r - 1) && (!u.formulaFields()[e + 1].setupFormula.isParenthesesEnd() && !u.formulaFields()[e].setupFormula.isParenthesesStart()) }, u.isConstantOperation = function (e) { var r = u.formulaFields().length; return !(r <= 1 || e == r - 1 || e == r) && u.formulaFields()[e + 1].setupFormula.isConstantValue() }, u.addFormulaParentheses = function () { var e, r; u.formulaFields().length <= 0 || u.formulaFields()[0].setupFormula.isParenthesesStart() && u.formulaFields()[u.formulaFields().length - 1].setupFormula.isParenthesesEnd() || (r = u.getEmptyFormulaField(), e = u.setupField(Object.assign({}, r)), r = u.setupField(Object.assign({}, r)), e.setupFormula.isParenthesesStart(!0), r.setupFormula.isParenthesesEnd(!0), u.formulaFields.splice(0, 0, e), u.formulaFields.push(r)) }, u.addFormulaConstantValue = function () { var e = u.getEmptyFormulaField(), e = u.setupField(Object.assign({}, e)); e.setupFormula.isConstantValue(!0), u.formulaFields.push(e) }, u.isFieldValidForYAxis = function (e, r, t) { return !(0 < e && "Bar" == u.ReportType() && ["Int", "Double", "Money"].indexOf(r) < 0 && "Count" != t) }, u.isChart = ko.computed(function () { return ["List", "Summary", "Single"].indexOf(u.ReportType()) < 0 }), u.isFieldValidForSubGroup = function (e, r) { return !(0 < e && ["Int", "Double", "Money"].indexOf(r) < 0) }, u.canDrilldown = ko.computed(function () { return ["List"].indexOf(u.ReportType()) < 0 }), u.dateFields = ko.computed(function () { return _.filter(u.SelectedFields(), function (e) { return "DateTime" == e.fieldType }) }), u.TotalSeries = ko.observable(0), u.AllSqlQuries = ko.observable(""), u.canAddSeries = ko.computed(function () { var e = 0 < u.dateFields().length && 0 <= ["Group", "Bar", "Line"].indexOf(u.ReportType()) && "DateTime" == u.SelectedFields()[0].fieldType, r = 0 < _.filter(u.FilterGroups(), function (e) { return 0 < _.filter(e.Filters(), function (e) { return "range" == e.Operator() && e.Value() && 0 == e.Value().indexOf("This") }).length }).length; return e && r }), u.canAddSeries.subscribe(function (e) { e || u.AdditionalSeries([]) }), u.AddSeries = function (e) { e = e || {}; var r = ko.observable(), t = (e.Field ? r(u.FindField(e.Field().fieldId)) : r(u.dateFields()[0]), ko.observableArray([])); function o(e) { t("This Year" === e ? ["Last Year", "2 Years ago", "3 Years ago", "4 Years ago", "5 Years ago"] : "This Month" === e ? ["Last Month", "2 Months ago", "3 Months ago", "4 Months ago", "5 Months ago"] : "This Week" === e ? ["Last Week", "2 Weeks ago", "3 Weeks ago", "4 Weeks ago", "5 Weeks ago"] : []) } _.forEach(u.FilterGroups(), function (e) { _.forEach(e.Filters(), function (e) { if (e.Field().FieldId == r().FieldId) return o(e.Value()), e.Value.subscribe(function (e) { o(e) }), !1 }) }), u.AdditionalSeries.push({ Field: r, Operator: ko.observable("Range"), Value: ko.observable(e.Value), Range: t }) }, u.canMoveUp = function () { return 1 == u.SelectFields().length && 1 <= u.SelectedFields.indexOf(u.SelectFields()[0]) }, u.canMoveDown = function () { return 1 == u.SelectFields().length && u.SelectedFields.indexOf(u.SelectFields()[0]) < u.SelectedFields().length - 1 }, u.MoveUp = function () { var e, r; u.canMoveUp() && (e = u.SelectFields()[0], 1 <= (e = u.SelectedFields.indexOf(e)) && (r = u.SelectedFields(), u.SelectedFields.splice(e - 1, 2, r[e], r[e - 1]))) }, u.MoveDown = function () { var e, r; u.canMoveDown() && (e = u.SelectFields()[0], (e = u.SelectedFields.indexOf(e)) < (r = u.SelectedFields()).length - 1 && u.SelectedFields.splice(e, 2, r[e + 1], r[e])) }, u.RemoveField = function (e) { var r = u.SelectedTable(), t = _.find(u.Tables(), { tableName: e.tableName }); e.isFormulaField() || null != r && t.tableId == r.tableId || null == t ? (u.SelectedFields.remove(e), u.RemoveInvalidFilters(u.FilterGroups())) : u.loadTableFields(t).done(function () { u.ChooseFields([]), u.SelectedFields.remove(e), u.RemoveInvalidFilters(u.FilterGroups()) }) }, u.RemoveSeries = function (e) { u.AdditionalSeries.remove(e) }, u.FindField = function (r) { return _.filter(u.SelectedFields(), function (e) { return e.fieldId == r })[0] }, u.SaveWithoutRun = function () { u.RunReport(!0) }, u.RemoveInvalidFilters = function (e) { _.forEach(e, function (t) { _.forEach(t.Filters(), function (e, r) { e && !e.Field() && t.RemoveFilter(e), 0 == r && u.RemoveInvalidFilters(t.FilterGroups()) }) }) }, u.BuildFilterData = function (e) { var r = []; return _.forEach(e, function (t) { var o = []; _.forEach(t.Filters(), function (e, r) { e = e.Apply() && e.IsFilterOnFly || !e.IsFilterOnFly ? { SavedReportId: u.ReportID(), FieldId: e.Field().fieldId, AndOr: (0 == r ? t : e).AndOr(), Operator: e.Operator(), Value1: "in" == e.Operator() || "not in" == e.Operator() ? e.ValueIn().join(",") : 0 <= e.Operator().indexOf("blank") ? "blank" : e.Value(), Value2: e.Value2(), Filters: 0 == r ? u.BuildFilterData(t.FilterGroups()) : [] } : null; (e = null == e || e.Value1 || e.Value2 ? e : null) && o.push(e) }), r.push({ SavedReportId: u.ReportID(), isRoot: t.isRoot, AndOr: t.AndOr(), Filters: o }) }), r }, u.SeriesDataIntoFilter = function (e, r) { var a = []; return _.forEach(e, function (t) { var e = [], o = (e.push(u.AdditionalSeries()[r]), []); _.forEach(e, function (e, r) { e = { SavedReportId: u.ReportID(), FieldId: e.Field().fieldId, AndOr: "AND", Operator: e.Operator().toLowerCase(), Value1: "in" == e.Operator() || "not in" == e.Operator() ? e.ValueIn().join(",") : 0 <= e.Operator().indexOf("blank") ? "blank" : e.Value(), Filters: 0 == r ? u.BuildFilterData(t.FilterGroups()) : [] }; (e = null == e || e.Value1 || e.Value2 ? e : null) && o.push(e) }), a.push({ SavedReportId: u.ReportID(), isRoot: t.isRoot, AndOr: t.AndOr(), Filters: o }) }), a }, u.BuildReportData = function (e, r, t) { e = e || []; var o = null != _.find(u.SelectedFields(), function (e) { return "Group in Detail" == e.selectedAggregate() }), r = r ? u.SeriesDataIntoFilter(u.FilterGroups(), t) : u.BuildFilterData(u.FilterGroups()); return { ReportID: u.ReportID(), ReportName: u.ReportName(), ReportDescription: u.ReportDescription(), FolderID: u.FolderID(), SelectedFieldIDs: _.map(u.SelectedFields(), function (e) { return e.fieldId }), Filters: r, Series: _.map(u.AdditionalSeries(), function (e) { return { SavedReportId: u.ReportID(), FieldId: e.Field().fieldId, Operator: e.Operator(), Value: e.Value() } }), IncludeSubTotals: u.IncludeSubTotal(), EditFiltersOnReport: u.EditFiltersOnReport(), ShowUniqueRecords: u.ShowUniqueRecords(), IsAggregateReport: (!(0 < e.length) || o) && u.AggregateReport(), ShowDataWithGraph: u.ShowDataWithGraph(), ShowOnDashboard: u.ShowOnDashboard(), SortBy: u.SortByField(), SortDesc: u.SortDesc(), SelectedSorts: _.map(u.SortFields(), function (e) { return { FieldId: e.sortByFieldId(), Descending: e.sortDesc() } }), ReportType: u.ReportType(), UseStoredProc: u.useStoredProc(), StoredProcId: u.useStoredProc() ? u.SelectedProc().Id : null, GroupFunctionList: _.map(u.SelectedFields(), function (e) { return { FieldID: e.fieldId, GroupFunc: e.selectedAggregate(), FilterOnFly: e.filterOnFly(), Disabled: e.disabled(), GroupInGraph: e.groupInGraph(), DontSubTotal: e.dontSubTotal(), HideInDetail: e.hideInDetail(), IsCustom: e.isFormulaField(), CustomLabel: e.fieldName, DataFormat: "None" == e.fieldFormat() ? null : e.fieldFormat(), CustomFieldDetails: _.map(e.formulaItems(), function (e) { return { FieldId: e.fieldId(), IsParenthesesStart: e.isParenthesesStart() || !1, IsParenthesesEnd: e.isParenthesesEnd() || !1, Operation: e.formulaOperation(), ConstantValue: e.constantValue() } }), LinkField: e.linkField(), LinkFieldItem: e.linkField() ? e.linkFieldItem.toJs() : null, FieldLabel: e.fieldLabel(), DecimalPlaces: e.decimalPlaces(), FieldAlign: e.fieldAlign(), FontColor: e.fontColor(), BackColor: e.backColor(), HeaderFontColor: e.headerFontColor(), HeaderBackColor: e.headerBackColor(), FontBold: e.fontBold(), HeaderFontBold: e.headerFontBold(), FieldWidth: e.fieldWidth(), FieldConditionOp: e.fieldConditionOp(), FieldConditionVal: e.fieldConditionVal() } }), Schedule: u.scheduleBuilder.toJs(), DrillDownRow: e, UserId: u.manageAccess.getAsList(u.manageAccess.users), ViewOnlyUserId: u.manageAccess.getAsList(u.manageAccess.viewOnlyUsers), DeleteOnlyUserId: u.manageAccess.getAsList(u.manageAccess.deleteOnlyUsers), UserRoles: u.manageAccess.getAsList(u.manageAccess.userRoles), ViewOnlyUserRoles: u.manageAccess.getAsList(u.manageAccess.viewOnlyUserRoles), DeleteOnlyUserRoles: u.manageAccess.getAsList(u.manageAccess.deleteOnlyUserRoles), DataFilters: d.dataFilters, SelectedParameters: u.useStoredProc() ? _.map(u.Parameters(), function (e) { return { UseDefault: "is default" == e.Operator(), ParameterId: e.Id, ParameterName: e.ParameterName, Value: e.Value(), Operator: e.Operator() } }) : [] } }, u.SaveFilterAndRunReport = function () { u.validateReport() ? (u.pager.currentPage(1), ajaxcall({ url: d.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/SaveReportFilter", SaveReport: !1, ReportJson: JSON.stringify(u.BuildReportData()), adminMode: u.adminMode(), SubTotalMode: !1 }) }), u.RunReport(!1)) : toastr.error("Please correct validation issues") }, u.RunReport = function (r, e) { if (r = !0 === r, e = !0 === e, u.TotalSeries(u.AdditionalSeries().length), "Single" == u.ReportType() && 1 != u.enabledFields().length) toastr.error("All fields except one must be hidden for Single Value Report"); else if (e || u.validateReport()) { for (var t = 0, o = !1, a = !1, l = null, n = u.AdditionalSeries().length, i = []; 0 < t && u.CanSaveReports(!(o = !0)), i.push(ajaxcall({ url: d.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!u.CanSaveReports() && u.SaveReport(), ReportJson: JSON.stringify(u.BuildReportData([], o, t - 1)), adminMode: u.adminMode(), SubTotalMode: !1 }), async: !1 }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), l = e, u.AllSqlQuries(u.AllSqlQuries() + (e.sql + ",")), u.ReportID(e.reportId), u.SaveReport() && r && 0 === n && (toastr.success("Report Saved"), u.AllSqlQuries(""), u.LoadAllSavedReports(!0)), r || "execute" != u.ReportMode() && "dashboard" != u.ReportMode() || (a = !0, u.ExecuteReportQuery(e.sql, e.connectKey, u.ReportSeries)) })), ++t < n + 1;); $.when.apply($, i).done(function () { !1 !== a || r || (d.samePageOnRun ? (d.reportWizard.modal("hide"), u.ReportID(l.reportId), u.ExecuteReportQuery(l.sql, l.connectKey), u.ReportMode("execute")) : redirectToReport(d.runReportUrl, { reportId: l.reportId, reportName: u.ReportName(), reportDescription: u.ReportDescription(), includeSubTotal: u.IncludeSubTotal(), showUniqueRecords: u.ShowUniqueRecords(), aggregateReport: u.AggregateReport(), showDataWithGraph: u.ShowDataWithGraph(), reportSql: u.AllSqlQuries(), connectKey: l.connectKey, reportFilter: JSON.stringify(_.map(u.FlyFilters(), function (e) { return ko.toJS(e) })), reportType: u.ReportType(), selectedFolder: null != u.SelectedFolder() ? u.SelectedFolder().Id : 0, reportSeries: _.map(u.AdditionalSeries(), function (e, r) { return e.Value() }) })) }) } else toastr.error("Please correct validation issues") }, u.ExecuteReportQuery = function (t, i, s) { if (t && i) return ajaxcall({ url: d.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: t, connectKey: i, reportType: u.ReportType(), pageNumber: u.pager.currentPage(), pageSize: u.pager.pageSize(), sortBy: u.pager.sortColumn() || "", desc: u.pager.sortDescending() || !1, reportSeries: s }) }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result); var r = u.ReportResult(); function o(e, r, t, o) { return e == r || (!(!t || !o || t != o) || !(r.indexOf("(Count)") < 0 && r.indexOf("(Avg)") < 0 && r.indexOf("(Sum)") < 0 && r.indexOf("(Average)") < 0) && (r = (r || "").replace("(Count)", "").replace("(Avg)", "").replace("(Average)", "").replace("(Sum)", "").trim(), (e = ((e = (e || "").trim()).endsWith("Id") || e.endsWith("ID") ? e.slice(0, -2) : e).trim()) == r)) } function a(e) { u.columnDetails([]), _.forEach(e, function (r, e) { var t; u.useStoredProc() ? (t = _.find(u.SelectedFields(), function (e) { return o(e.procColumnName, r.ColumnName) }), r.hideStoredProcColumn = !t || t.disabled()) : t = _.find(u.SelectedFields(), function (e) { return o(e.fieldName, r.ColumnName, e.dbField, r.SqlField) }), t && t.linkField() ? (r.linkItem = t.linkFieldItem.toJs(), r.linkField = !0) : (r.linkItem = {}, r.linkField = !1), t = ko.toJS(t || { fieldName: r.ColumnName }), u.columnDetails.push(t), r.decimalPlaces = t.decimalPlaces, r.fieldAlign = t.fieldAlign, r.fieldConditionOp = t.fieldConditionOp, r.fieldConditionVal = t.fieldConditionVal, r.fieldFormat = t.fieldFormat, r.fieldLabel = t.fieldLabel, r.fieldName = t.fieldName, r.fieldWidth = t.fieldWidth, r.fontBold = t.fontBold, r.headerFontBold = t.headerFontBold, r.headerFontColor = t.headerFontColor, r.headerBackColor = t.headerBackColor, r.fieldId = t.fieldId, r.fontColor = t.fontColor, r.backColor = t.backColor, r.groupInGraph = t.groupInGraph, r.dontSubTotal = t.dontSubTotal }) } function l(e, a) { _.forEach(e, function (e, r) { e.LinkTo = ""; var t, o, r = a[r]; if (r && r.linkField && (o = "", (t = r.linkItem).LinksToReport ? (o = d.runLinkReportUrl + "?reportId=" + t.LinkedToReportId, t.SendAsFilterParameter && (o += "&filterId=" + t.SelectedFilterId + "&filterValue=" + e.Value)) : o = t.LinkToUrl + (t.SendAsQueryParameter ? "?" + t.QueryParameterName + "=" + e.LabelValue : ""), e.LinkTo = o), e.backColor = (r = r || {}).backColor, e.fieldAlign = r.fieldAlign, e.fieldWidth = r.fieldWidth, e.fontBold = r.fontBold, e.fontColor = r.fontColor, e.fieldId = r.fieldId, 0 <= u.decimalFormatTypes.indexOf(r.fieldFormat)) switch (e.FormattedValue = u.formatNumber(e.Value, r.decimalPlaces), r.fieldFormat) { case "Currency": e.FormattedValue = "$" + e.FormattedValue; break; case "Percentage": e.FormattedValue = e.FormattedValue + "%" }if (0 <= u.dateFormatTypes.indexOf(r.fieldFormat)) switch (r.fieldFormat) { case "Date": e.FormattedValue = new Date(e.Value).toLocaleDateString("en-US", { year: "numeric", month: "numeric", day: "numeric" }); break; case "Date and Time": e.FormattedValue = new Date(e.Value).toLocaleDateString("en-US", { year: "numeric", month: "numeric", day: "numeric", hour: "numeric", minute: "numeric", second: "numeric" }); break; case "Time": e.FormattedValue = new Date(e.Value).toLocaleTimeString("en-US", { hour: "numeric", minute: "numeric", second: "numeric" }) } }) } r.HasError(e.HasError), r.Exception(e.Exception), r.Warnings(e.Warnings), r.ReportDebug(e.ReportDebug), r.ReportSql(e.ReportSql), u.ReportSeries = s, a(e.ReportData.Columns), u.useStoredProc() && (e.ReportData.Columns = _.filter(e.ReportData.Columns, function (e) { return 0 == e.hideStoredProcColumn })); var n = _.map(e.ReportData.Columns, "SqlField"); e.ReportData.IsDrillDown = ko.observable(!1), _.forEach(e.ReportData.Rows, function (t) { t.DrillDownData = ko.observable(null), t.pager = new pagerViewModel({ pageSize: 10 }), t.sql = "", t.connectKey = "", t.changeSort = function (e) { return t.pager.changeSort(e), t.execute(), !1 }, t.isExpanded = ko.observable(!1), t.execute = function () { "" != t.sql && ajaxcall({ url: d.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: t.sql, connectKey: t.connectKey, reportType: "List", pageNumber: t.pager.currentPage(), pageSize: t.pager.pageSize(), sortBy: t.pager.sortColumn() || "", desc: t.pager.sortDescending() || !1, reportSeries: s }) }).done(function (r) { (r = (r = r.d ? r.d : r).result ? r.result : r).ReportData.IsDrillDown = ko.observable(!0), a(r.ReportData.Columns), _.forEach(r.ReportData.Rows, function (e) { l(e.Items, r.ReportData.Columns) }), t.DrillDownData(r.ReportData), t.pager.totalRecords(r.Pager.TotalRecords), t.pager.pages(r.Pager.TotalPages) }) }, t.expand = function (r) { ajaxcall({ url: d.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunDrillDownReport", SaveReport: !1, ReportJson: JSON.stringify(u.BuildReportData(t.Items)), adminMode: u.adminMode(), SubTotalMode: !1 }) }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), t.sql = e.sql, t.connectKey = e.connectKey, u.expandSqls.push({ index: r, sql: t.sql }), t.execute() }), t.isExpanded(!0) }, t.pager.currentPage.subscribe(function () { t.execute() }), t.collapse = function () { t.isExpanded(!1) }, t.toggle = function () { t.isExpanded() ? t.collapse() : t.expand() }, u.useStoredProc() && (t.Items = _.filter(t.Items, function (e) { return _.includes(n, e.Column.SqlField) })), l(t.Items, e.ReportData.Columns) }), r.ReportData(e.ReportData), u.pager.totalRecords(e.Pager.TotalRecords), u.pager.pages(e.Pager.TotalPages), u.currentSql(t), u.currentConnectKey(i), e.Warnings && toastr.info("Note: " + e.Warnings), u.isChart() && (google.charts.load("current", { packages: ["corechart", "geochart"] }), google.charts.setOnLoadCallback(u.DrawChart)), u.IncludeSubTotal() && ajaxcall({ url: d.runReportApiUrl, type: "POST", data: JSON.stringify({ method: "/ReportApi/RunReport", SaveReport: !!u.CanSaveReports() && u.SaveReport(), ReportJson: JSON.stringify(u.BuildReportData()), adminMode: u.adminMode(), SubTotalMode: !0 }) }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), ajaxcall({ url: d.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: e.sql, connectKey: e.connectKey, reportType: u.ReportType(), pageNumber: 1, pageSize: 1, sortBy: "", desc: !1, reportSeries: null }) }).done(function (r) { a((r = (r = r.d ? r.d : r).result ? r.result : r).ReportData.Columns), _.forEach(r.ReportData.Rows, function (e) { l(e.Items, r.ReportData.Columns) }), u.ReportResult().SubTotals(r.ReportData.Rows) }) }), setTimeout(function () { u.allowTableResize() }, 2e3) }) }, u.expandSqls = ko.observableArray([]), u.ExpandAll = function () { u.expandSqls([]); var r = 0; _.forEach(u.ReportResult().ReportData().Rows, function (e) { e.expand(r++) }), u.allExpanded(!0) }, u.CollapseAll = function () { _.forEach(u.ReportResult().ReportData().Rows, function (e) { e.collapse() }), u.allExpanded(!1), u.expandSqls([]) }, u.getExpandSqls = ko.computed(function () { return u.allExpanded() && 0 != u.expandSqls().length ? _.map(_.orderBy(u.expandSqls(), "index"), function (e) { return e.sql }) : [] }), u.getColumnDetails = ko.computed(function () { return JSON.stringify(u.columnDetails()) }), u.skipDraw = !0 === d.skipDraw, u.DrawChart = function () { var a, l, n, i, s, d, e, r, t; u.isChart() && !0 !== u.skipDraw && (a = u.ReportResult().ReportData(), l = new google.visualization.DataTable, n = [], i = [], _.forEach(a.Columns, function (e, r) { u.SelectedFields()[r]; 0 == r ? l.addColumn(e.IsNumeric ? "number" : "string", e.fieldLabel || e.ColumnName) : e.IsNumeric && !e.groupInGraph && i.push({ index: r, column: e.fieldLabel || e.ColumnName }) }), 0 == n.length && _.forEach(a.Columns, function (e, r) { 0 < r && e.IsNumeric && !e.groupInGraph && l.addColumn(e.IsNumeric ? "number" : "string", e.fieldLabel || e.ColumnName) }), s = [], d = [], _.forEach(a.Rows, function (e) { var o = []; _.forEach(e.Items, function (r, t) { var e = a.Columns[t]; 0 == t ? 0 < n.length && 0 < (o = _.filter(s, function (e) { return e[0] == r.Value })).length ? (s = s.filter(function (e) { return e[0] != r.Value }), o = o[0]) : o.push((r.Column.IsNumeric ? parseInt(r.Value) : r.Value) || (r.Column.IsNumeric ? 0 : "")) : 0 < n.length ? 1 == _.filter(n, function (e) { return e.index == t }).length ? 0 == _.filter(d, function (e) { return e == r.Value }).length && (d.push(r.Value || ""), _.forEach(i, function (e) { l.addColumn("number", r.Value + (0 == e ? "" : "-" + e)) })) : r.Column.IsNumeric && o.push((r.Column.IsNumeric ? parseInt(r.Value) : r.Value) || (r.Column.IsNumeric ? 0 : "")) : r.Column.IsNumeric && !e.groupInGraph && o.push((r.Column.IsNumeric ? parseInt(r.Value) : r.Value) || (r.Column.IsNumeric ? 0 : "")) }), s.push(o) }), _.forEach(s, function (e) { if (e.length != l.getNumberOfColumns()) for (var r = 0; r <= l.getNumberOfColumns() - e.length; r++)e.push(0) }), l.addRows(s), e = { title: u.ReportName(), animation: { startup: !0, duration: 1e3, easing: "out" } }, r = document.getElementById("chart_div_" + u.ReportID()), t = null, "Pie" == u.ReportType() && (t = new google.visualization.PieChart(r)), "Bar" == u.ReportType() && (t = new google.visualization.ColumnChart(r)), "Line" == u.ReportType() && (t = new google.visualization.LineChart(r)), (t = "Map" == u.ReportType() ? new google.visualization.GeoChart(r) : t).draw(l, e), u.ChartData(t.getImageURI())) }, u.loadFolders = function (r) { return ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: u.adminMode() }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), u.Folders(e), u.SelectedFolder(null), r && 0 < (e = _.filter(e, function (e) { return e.Id == r })).length && u.SelectedFolder(e[0]) }) }, u.editLinkField = ko.observable(), u.editFieldOptions = ko.observable(), u.setupField = function (r) { r.selectedFieldName = r.tableName + " > " + r.fieldName, r.fieldAggregateWithDrilldown = r.fieldAggregate.concat("Only in Detail").concat("Group in Detail"), r.selectedAggregate = ko.observable(r.aggregateFunction), r.filterOnFly = ko.observable(r.filterOnFly), r.disabled = ko.observable(r.disabled), r.groupInGraph = ko.observable(r.groupInGraph), r.dontSubTotal = ko.observable(r.dontSubTotal), r.hideInDetail = ko.observable(r.hideInDetail), r.linkField = ko.observable(r.linkField), r.linkFieldItem = new linkFieldViewModel(r.linkFieldItem, d), r.isFormulaField = ko.observable(r.isFormulaField), r.fieldFormat = ko.observable(r.fieldFormat), r.fieldLabel = ko.observable(r.fieldLabel), r.decimalPlaces = ko.observable(r.decimalPlaces), r.fieldAlign = ko.observable(r.fieldAlign), r.fontColor = ko.observable(r.fontColor), r.backColor = ko.observable(r.backColor || "#ffffff"), r.headerFontColor = ko.observable(r.headerFontColor), r.headerBackColor = ko.observable(r.headerBackColor || "#ffffff"), r.fontBold = ko.observable(r.fontBold), r.headerFontBold = ko.observable(r.headerFontBold), r.fieldWidth = ko.observable(r.fieldWidth), r.fieldConditionOp = ko.observable(r.fieldConditionOp), r.fieldConditionVal = ko.observable(r.fieldConditionVal), r.applyAllHeaderFontColor = ko.observable(!1), r.applyAllHeaderBackColor = ko.observable(!1), r.applyAllFontColor = ko.observable(!1), r.applyAllBackColor = ko.observable(!1), r.applyAllBold = ko.observable(!1), r.applyAllHeaderBold = ko.observable(!1), r.toggleDisable = function () { !r.disabled() && u.enabledFields().length < 2 || r.disabled(!r.disabled()) }; var t = []; return _.forEach(r.formulaItems || [], function (e) { t.push(new formulaFieldViewModel({ fieldId: e.fieldId || 0, isParenthesesStart: e.setupFormula ? e.setupFormula.isParenthesesStart() : e.isParenthesesStart, isParenthesesEnd: e.setupFormula ? e.setupFormula.isParenthesesEnd() : e.isParenthesesEnd, formulaOperation: e.setupFormula ? e.setupFormula.formulaOperation() : e.formulaOperation, constantValue: e.setupFormula ? e.setupFormula.constantValue() : e.constantValue })) }), r.formulaItems = ko.observableArray(t), r.setupFormula = new formulaFieldViewModel, r.setupLinkField = function () { u.editLinkField(r), d.linkModal && d.linkModal.modal("show") }, r.removeLinkField = function () { r.linkField(!1), r.linkFieldItem.clear(), d.linkModal && d.linkModal.modal("hide") }, r.saveLinkField = function () { r.linkFieldItem.validateLink() ? (r.linkField(!0), d.linkModal && d.linkModal.modal("hide")) : toastr.error("Please correct validation issues") }, r.setupFieldOptions = function () { u.currentFieldOptions = { fieldFormat: r.fieldFormat(), fieldLabel: r.fieldLabel(), decimalPlaces: r.decimalPlaces(), fieldAlign: r.fieldAlign(), fontColor: r.fontColor(), backColor: r.backColor(), headerFontColor: r.headerFontColor(), headerBackColor: r.headerBackColor(), fontBold: r.fontBold(), headerFontBold: r.headerFontBold(), fieldWidth: r.fieldWidth(), fieldConditionOp: r.fieldConditionOp(), fieldConditionVal: r.fieldConditionVal() }, u.editFieldOptions(r), d.fieldOptionsModal && d.fieldOptionsModal.modal("show") }, r.saveFieldOptions = function () { _.forEach(u.SelectedFields(), function (e) { r.applyAllHeaderFontColor() && e.headerFontColor(r.headerFontColor()), r.applyAllHeaderBackColor() && e.headerBackColor(r.headerBackColor()), r.applyAllFontColor() && e.fontColor(r.fontColor()), r.applyAllBackColor() && e.backColor(r.backColor()), r.applyAllBold() && e.fontBold(r.fontBold()), r.applyAllHeaderBold() && e.headerFontBold(r.headerFontBold()) }), d.fieldOptionsModal && d.fieldOptionsModal.modal("hide") }, r.cancelFieldOptions = function () { r.fieldFormat(u.currentFieldOptions.fieldFormat), r.fieldLabel(u.currentFieldOptions.fieldLabel), r.fieldAlign(u.currentFieldOptions.fieldAlign), r.decimalPlaces(u.currentFieldOptions.decimalPlaces), r.fontColor(u.currentFieldOptions.fontColor), r.backColor(u.currentFieldOptions.backColor), r.headerFontColor(u.currentFieldOptions.headerFontColor), r.headerBackColor(u.currentFieldOptions.headerBackColor), r.fontBold(u.currentFieldOptions.fontBold), r.headerFontBold(u.currentFieldOptions.headerFontBold), r.fieldWidth(u.currentFieldOptions.fieldWidth), r.fieldConditionOp(u.currentFieldOptions.fieldConditionOp), r.fieldConditionVal(u.currentFieldOptions.fieldConditionVal), d.fieldOptionsModal && d.fieldOptionsModal.modal("hide") }, r }, u.PopulateReport = function (e, r, t) { u.ReportID(e.ReportID), u.ReportType(e.ReportType), u.ReportName(e.ReportName), u.ReportDescription(e.ReportDescription), u.FolderID(e.FolderID), u.ChosenFields([]), u.SelectFields([]), u.SelectedField(null), u.manageAccess.setupList(u.manageAccess.users, e.UserId || ""), u.manageAccess.setupList(u.manageAccess.userRoles, e.UserRoles || ""), u.manageAccess.setupList(u.manageAccess.viewOnlyUserRoles, e.ViewOnlyUserRoles || ""), u.manageAccess.setupList(u.manageAccess.viewOnlyUsers, e.ViewOnlyUserId || ""), u.manageAccess.setupList(u.manageAccess.deleteOnlyUserRoles, e.DeleteOnlyUserRoles || ""), u.manageAccess.setupList(u.manageAccess.deleteOnlyUsers, e.DeleteOnlyUserId || ""), u.IncludeSubTotal(e.IncludeSubTotals), u.EditFiltersOnReport(e.EditFiltersOnReport), u.ShowUniqueRecords(e.ShowUniqueRecords), u.AggregateReport(e.IsAggregateReport), u.ShowDataWithGraph(e.ShowDataWithGraph), u.ShowOnDashboard(e.ShowOnDashboard), u.SortByField(e.SortBy), u.SortDesc(e.SortDesc), u.pager.sortDescending(e.SortDesc); var o = _.find(u.SavedReports(), { reportId: e.ReportID }) || { canEdit: !1 }, a = (u.CanEdit(o.canEdit || u.adminMode()), u.FilterGroups([]), u.AdditionalSeries([]), u.SortFields([]), u.scheduleBuilder.fromJs(e.Schedule), u.HideReportHeader(e.HideReportHeader), u.useReportHeader(e.UseReportHeader && !e.HideReportHeader), "execute" == u.ReportMode() && (u.useReportHeader() ? (u.headerDesigner.init(!0), u.headerDesigner.loadCanvas(!0)) : u.headerDesigner.dispose()), []); function l(e, t) { e && 0 != e.length && _.forEach(e, function (r) { var e; r.FieldId ? a.indexOf(r.FieldId) < 0 && ((e = 0 < _.filter(u.SelectedFields(), function (e) { return 1 == e.filterOnFly() && e.fieldId == r.FieldId }).length) && a.push({ fieldId: r.FieldId }), (t = null == t ? u.FilterGroups()[0] : t).AddFilter(r, e)) : t = null == t ? u.FilterGroups()[0] : t.AddFilterGroup({ AndOr: r.AndOr }), l(r.Filters, t) }) } if (1 == r && d.reportFilter && "[]" != d.reportFilter && (o = JSON.parse(d.reportFilter), _.forEach(o, function (r) { var e = _.filter(a, function (e) { return e.fieldId == r.Field.fieldId }); 0 < e.length && (r.FieldId = r.Field.fieldId, r.Value1 = r.Value, a.push(e[0]), u.FilterGroups()[0].AddFilter(r, !0)) })), l(e.Filters), _.forEach(e.Series, function (e) { u.AddSeries(e) }), _.forEach(e.SelectedSorts, function (e) { u.addSortField(e.FieldId, e.Descending) }), u.SaveReport(!r && u.CanEdit()), !t && 0 < u.AdditionalSeries().length && (t = _.map(u.AdditionalSeries(), function (e, r) { return e.Value() }).join(",")), "execute" == u.ReportMode() || "dashboard" == u.ReportMode()) return u.ExecuteReportQuery(d.reportSql, d.reportConnect, t) }, u.LoadReport = function (e, t, o) { return u.SelectedTable(null), u.isFormulaField(!1), ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/LoadReport", model: JSON.stringify({ reportId: e, adminMode: u.adminMode(), userIdForSchedule: u.userIdForSchedule }) } }).done(function (r) { if ((r = r.d ? r.d : r).result && (r = r.result), u.useStoredProc(r.UseStoredProc), u.ReportType(r.ReportType), !u.useStoredProc()) return _.forEach(r.SelectedFields, function (e) { u.setupField(e) }), u.SelectedFields(r.SelectedFields), u.PopulateReport(r, t, o); function e() { var e = _.find(u.Procs(), { Id: r.StoredProcId }); e && (e.SelectedFields = r.SelectedFields, e.SelectedParameters = r.SelectedParameters, u.SelectedProc(e), u.PopulateReport(r, t, o)) } 0 == u.Procs().length ? u.loadProcs().done(function () { e() }) : e() }) }, u.LoadAllSavedReports = function (t) { ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: u.adminMode() }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), _.forEach(e, function (r) { r.runMode = !1, r.openReport = function () { return u.LoadReport(r.reportId).done(function () { r.runMode ? (u.SaveReport(!1), u.RunReport(!1, !0), r.runMode = !1) : u.ReportMode("generate") }) }, r.copyReport = function () { r.openReport().done(function () { u.ReportID(0), u.ReportName("Copy of " + u.ReportName()), u.CanEdit(!0), u.SaveReport(!0) }) }, r.runReport = function () { r.runMode = !0, r.openReport() }, r.deleteReport = function () { bootbox.confirm("Are you sure you would like to Delete this Report?", function (e) { e && ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/DeleteReport", model: JSON.stringify({ reportId: r.reportId }) } }).done(function () { u.SavedReports.remove(r) }) }) }, 0 < d.reportId && r.reportId == d.reportId && !0 !== t && (r.openReport(), d.reportWizard.modal("show")) }), u.SavedReports(e) }) }, "dashboard" != u.ReportMode() && u.loadFolders().done(function () { u.LoadAllSavedReports(), ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/CanSaveReports", model: "{}" } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), u.CanSaveReports((e = e || { allowUsersToCreateReports: !0, allowUsersToManageFolders: !0 }).allowUsersToCreateReports), u.CanManageFolders(e.allowUsersToManageFolders) }) }), u.changeSort = function (e) { return u.pager.changeSort(e), u.ExecuteReportQuery(u.currentSql(), u.currentConnectKey(), u.ReportSeries), !1 }, u.formatNumber = function (e, r) { return null === r && (r = 2), r = isNaN(r = Math.abs(r)) ? 2 : r, parseFloat(e).toFixed(r).replace(/\B(?=(\d{3})+(?!\d))/g, ",") }, u.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, u.validateReport = function (e) { if (null != d.reportWizard) { var r = d.reportWizard.find(!0 === e ? "#custom-field-design input, #custom-field-design select" : "input, select"), t = !0; $(".needs-validation").removeClass("was-validated"); for (var o = 0; o < r.length; o++)$(r[o]).removeClass("is-invalid"), u.isInputValid(r[o]) || (t = !1, $(".needs-validation").addClass("was-validated"), $(r[o]).addClass("is-invalid")); return _.forEach(u.SavedReports(), function (e) { if (e.reportName == u.ReportName() && e.reportId != u.ReportID()) return t = !1, toastr.error("Report name is already in use, please choose a different name"), !1 }), t } }, u.loadProcs = function () { return ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/GetProcedures", model: JSON.stringify({ adminMode: u.adminMode() }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), u.Procs(e) }) }, u.loadTables = function () { ajaxcall({ url: d.apiUrl, data: { method: "/ReportApi/GetTables", model: JSON.stringify({ adminMode: u.adminMode() }) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), u.Tables(e) }) }, u.init = function (e, r) { r ? $("#noaccountModal").modal("show") : (u.loadFolders(e), u.loadTables(), u.loadProcs(), r = !1, "true" === (r = localStorage ? localStorage.getItem("reportAdminMode") : r) && u.adminMode(!0)) }, u.allowTableResize = function () { var t, o; Array.prototype.forEach.call(document.querySelectorAll(".report-inner table th"), function (r) { r.style.position = "relative"; var e = document.createElement("div"); e.innerHTML = "&nbsp;", e.style.top = 0, e.style.right = 0, e.style.bottom = 0, e.style.width = "5px", e.style.position = "absolute", e.style.cursor = "col-resize", e.addEventListener("mousedown", function (e) { o = (t = r).offsetWidth - e.pageX }), r.appendChild(e) }), document.addEventListener("mousemove", function (e) { t && (t.style.width = o + e.pageX + "px") }), document.addEventListener("mouseup", function () { var e; t && t.id && t.style && ((e = _.find(u.SelectedFields(), { fieldId: parseInt(t.id) })) && e.fieldWidth(t.style.width), ajaxcall({ url: d.apiUrl, noBlocking: !0, data: { method: "/ReportApi/UpdateReportColumnWidth", model: JSON.stringify({ width: t.style.width, fieldId: parseInt(t.id), reportId: parseInt(u.ReportID()) }) } })), t = void 0 }) } }, dashboardViewModel = function (t) { var a = this, e = (t.isDashboard = !0, a.dashboards = ko.observableArray(t.dashboards || []), a.adminMode = ko.observable(!1), a.currentUserId = t.userId, a.currentUserRole = (t.currentUserRole || []).join(), a.reportsAndFolders = ko.observableArray([]), a.allowAdmin = ko.observable(t.allowAdmin), 0 < t.dashboardId ? _.find(a.dashboards(), { id: t.dashboardId }) || { name: "", description: "" } : 0 < a.dashboards().length ? a.dashboards()[0] : { name: "", description: "" }), o = (a.dashboard = { Id: ko.observable(e.id), Name: ko.observable(e.name), Description: ko.observable(e.description), manageAccess: manageAccess(t) }, a.currentDashboard = ko.observable(e), a.selectDashboard = ko.observable(e.id), a.selectDashboard.subscribe(function (e) { e != a.currentDashboard().id && (window.location = window.location.href.split("?")[0] + "?id=" + e) }), a.newDashboard = function () { a.dashboard.Id(0), a.dashboard.Name(""), a.dashboard.Description(""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.users, ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.userRoles, ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.viewOnlyUserRoles, ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.viewOnlyUsers, ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.deleteOnlyUserRoles, ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.deleteOnlyUsers, ""), _.forEach(a.reportsAndFolders(), function (e) { _.forEach(e.reports, function (e) { e.selected(!1) }) }) }, a.editDashboard = function () { a.dashboard.Id(a.currentDashboard().id), a.dashboard.Name(a.currentDashboard().name), a.dashboard.Description(a.currentDashboard().description), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.users, a.currentDashboard().userId || ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.userRoles, a.currentDashboard().userRoles || ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.viewOnlyUserRoles, a.currentDashboard().viewOnlyUserRoles || ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.viewOnlyUsers, a.currentDashboard().viewOnlyUserId || ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.deleteOnlyUserRoles, a.currentDashboard().deleteOnlyUserRoles || ""), a.dashboard.manageAccess.setupList(a.dashboard.manageAccess.deleteOnlyUsers, a.currentDashboard().deleteOnlyUserId || ""); var r = (a.currentDashboard().selectedReports || "").split(","); _.forEach(a.reportsAndFolders(), function (e) { _.forEach(e.reports, function (e) { e.selected(0 <= r.indexOf(e.reportId.toString())) }) }) }, a.saveDashboard = function () { var r, e; return $(".form-group").removeClass("needs-validation"), a.dashboard.Name() ? (r = "", _.forEach(a.reportsAndFolders(), function (e) { _.forEach(e.reports, function (e) { e.selected() && (r += (r ? "," : "") + e.reportId) }) }), e = { id: a.dashboard.Id() || 0, name: a.dashboard.Name(), description: a.dashboard.Description(), selectedReports: r, userIdAccess: a.dashboard.manageAccess.getAsList(a.dashboard.manageAccess.users), viewOnlyUserId: a.dashboard.manageAccess.getAsList(a.dashboard.manageAccess.viewOnlyUsers), deleteOnlyUserId: a.dashboard.manageAccess.getAsList(a.dashboard.manageAccess.deleteOnlyUsers), userRolesAccess: a.dashboard.manageAccess.getAsList(a.dashboard.manageAccess.userRoles), viewOnlyUserRoles: a.dashboard.manageAccess.getAsList(a.dashboard.manageAccess.viewOnlyUserRoles), deleteOnlyUserRoles: a.dashboard.manageAccess.getAsList(a.dashboard.manageAccess.deleteOnlyUserRoles), adminMode: a.adminMode() }, ajaxcall({ url: t.apiUrl, data: { method: "/ReportApi/SaveDashboard", model: JSON.stringify(e) } }).done(function (e) { (e = e.d ? e.d : e).result && (e = e.result), toastr.success("Dashboard saved successfully"), setTimeout(function () { window.location = window.location.href.split("?")[0] + "?id=" + e.id }, 500) }), !0) : ($("#add-dash-name").closest(".form-group").addClass("needs-validation"), !1) }, a.deleteDashboard = function () { bootbox.confirm("Are you sure you would like to Delete this Dashboard?", function (e) { e && ajaxcall({ url: t.apiUrl, data: { method: "/ReportApi/DeleteDashboard", model: JSON.stringify({ id: a.currentDashboard().id, adminMode: a.adminMode() }) } }).done(function (e) { toastr.success("Dashboard deleted successfully"), setTimeout(function () { window.location = window.location.href.split("?")[0] }, 500) }) }) }, a.reports = ko.observableArray([]), 0); _.forEach(t.reports, function (e) { var r = new reportViewModel({ runReportUrl: t.runReportUrl, execReportUrl: t.execReportUrl, reportWizard: t.reportWizard, lookupListUrl: t.lookupListUrl, runReportApiUrl: t.runReportApiUrl, apiUrl: t.apiUrl, reportFilter: e.reportFilter, reportMode: "dashboard", reportSql: e.reportSql, reportId: e.reportId, reportConnect: e.connectKey, users: t.users, userRoles: t.userRoles, skipDraw: !0 }); r.x = ko.observable(e.x), r.y = ko.observable(e.y), r.width = ko.observable(e.width), r.height = ko.observable(e.height), r.panelStyle = "panel-" + (0 == o ? "default" : 1 == o ? "info" : 2 == o ? "warning" : "danger"), o = 3 == o ? 0 : o + 1, a.reports.push(r), r.LoadReport(e.reportId, !0, ""), r.showFlyFilters = ko.observable(!1), r.toggleFlyFilters = function () { r.showFlyFilters(!r.showFlyFilters()) } }), a.drawChart = function () { _.forEach(a.reports(), function (e) { e.skipDraw = !1, e.DrawChart() }) }, a.updatePosition = function (e) { e && e.id && ajaxcall({ url: t.apiUrl, noBlocking: !0, data: { method: "/ReportApi/UpdateDashboardReportPosition", model: JSON.stringify({ x: e.x, y: e.y, width: e.width, height: e.height, dashboardId: a.currentDashboard().id, reportId: parseInt(e.id) }) } }) }, a.init = function () { var e = !1; "true" === (e = localStorage ? localStorage.getItem("reportAdminMode") : e) && a.adminMode(!0); return $.when(ajaxcall({ url: t.apiUrl, data: { method: "/ReportApi/GetSavedReports", model: JSON.stringify({ adminMode: a.adminMode() }) } }), ajaxcall({ url: t.apiUrl, data: { method: "/ReportApi/GetFolders", model: JSON.stringify({ adminMode: a.adminMode() }) } })).done(function (t, e) { var o = []; e[0].d && (e[0] = e[0].d), t[0].d && (t[0] = t[0].d), e[0].result && (e[0] = e[0].result), t[0].result && (t[0] = t[0].result), _.forEach(e[0], function (e) { var r = _.filter(t[0], { folderId: e.Id }); o.push({ folderId: e.Id, folder: e.FolderName, reports: _.map(r, function (e) { return { reportId: e.reportId, reportName: e.reportName, reportDescription: e.reportDescription, reportType: e.reportType, selected: ko.observable(!1) } }) }) }), a.reportsAndFolders(o) }) }, a.adminMode.subscribe(function (e) { localStorage && localStorage.setItem("reportAdminMode", e) }) };